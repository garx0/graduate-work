0. Работа программной реализации тестировалась только на ОС Ubuntu 19.10, но предполагается, что будет работать и на ОС Windows.

1. Проект с программной реализацией для ВКР собирается путём запуска скрипта build.sh. Для этого требуется наличие CMake и g++.

2. После сборки проекта исполняемые файлы будут находиться по адресам build/delaytool и build/deletepaths.

  - build/delaytool - основная программа для рассчёта оценок задержки для конфигурации сети в формате .xml. Примеры таких входных данных в формате .xml содержатся в директории experiments/vlconfigs.

    * Чтобы запускать delaytool на данных в формате, используемом в САПР AFDX (с расширением .afdxxml), этот формат нужно будет перед запуском преобразовать к требуемому для данной программной реализации формату при помощи программы experiments/convertformat.py на Python 3.6+.

  - build/deletepaths - вспомогательное средство, используемое для подготовки входных данных для экспериментов (см. текст работы).

3. Результаты экспериментов содержатся в experiments/data.

4. Подготовленные входные данные для экспериментов содержатся в experiments/vlconfigs.

5. Эксперименты на основе готовых входных данных можно запустить заново при помощи скрипта experiments/launch_experiments.sh, собрав перед этим данный проект.
  - Для выполнения этого скрипта требуется Python 3.6+.
  - После окончания экспериментов более подробные сырые результаты экспериментов со всеми задержками и конфигурациями сети, не приложенные изначально к данному проекту, появятся в директориях в experiments/msggen1/delays и experiments/msggen2/delays (объёмом порядка 1 ГБ).
  - Эксперименты могут занять несколько часов, но их можно остановить, послав сигнал SIGINT (Ctrl+C) процессу экспериментов, и тогда данные в директории data будут содержать результаты не всех экспериментов. Если послать этот сигнал во время одного из запусков delaytool в ходе экспериментов, то данный подпроцесс delaytool (эксперимент) будет остановлен и отменён, но серия экспериментов продолжится с запусков delaytool на следующих файлах из набора входных данных.

6. Входные данные для экспериментов можно сгенерировать заново при помощи скрипта experiments/prepare_experiments.sh, но перед его запуском требуется собрать инструментальную систему построения виртуальных каналов в AFDX (САПР AFDX), разработанную в рамках диссертации П.Вдовина "Жадные алгоритмы и стратегии ограниченного перебора для планирования вычислений в системах с жесткими требованиями к качеству обслуживания" и не приложенную к данному проекту. После сборки САПР AFDX необходимо скопировать исполнительный файл AFDX_Designer из папки algo проекта САПР AFDX в папку experiments/algo данного проекта. Для выполнения скрипта experiments/prepare_experiments.sh также требуется Python 3.6+.

7. Подробности о работе программ и скриптов, содержащихся в проекте, можно прочитать в комментариях к Shell-скриптам и программам на Python и C++, а также при запуске некоторых программ без аргументов командной строки.

